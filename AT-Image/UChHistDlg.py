"""Subclass of ChHistDlg, which is generated by wxFormBuilder."""

import wx

import CL
import UCommon

import matplotlib
matplotlib.use('WXAgg')

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from matplotlib.figure import Figure

# Implementing ChHistDlg
class UChHistDlg( CL.ChHistDlg ):
	def __init__( self, parent ):
		CL.ChHistDlg.__init__( self, parent )

	# Handlers for ChHistDlg events.
	def OnCancel( self, event ):
		# TODO: Implement OnCancel
		self.EndModal(0)

	def OnPreView( self, event ):
		# TODO: Implement OnPreView
		self.Execute(False)

	def OnExec( self, event ):
		# TODO: Implement OnExec
		self.Execute(True)
		self.EndModal(1)

	def ShowHist(self, preview=None):
		"""ヒストグラムを表示する
		@param UOpenCV preview : プレビュー処理した画像
		"""
		gray = self.cv_image.grayscale().calcHist()  # ダイアローグに表示するグラフ
		if preview is not None:
			gray2 = preview.grayscale().calcHist()
		# panelをmatplotlibで使えるようにする
		# https://www.webdevqa.jp.net/ja/python/wxpython%E3%83%91%E3%83%8D%E3%83%AB%E5%86%85%E3%81%ABmatplotlib-figure%E3%82%92%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%80/1066896187/ (2022/03/28)
		# 毎回設定しないとだめみたい
		self.m_panel11.figure = Figure(dpi=100, figsize=(4.0,3.8)) # figsizeで大きさ指定　単位はインチ
		self.m_panel11.axes = self.m_panel11.figure.add_subplot(111)
		self.m_panel11.canvas = FigureCanvas(self.m_panel11, -1, self.m_panel11.figure)
		self.m_panel11.axes.plot(gray.hist_b, color='k')
		if preview is not None:
			self.m_panel11.axes.plot(gray2.hist_b, color='m')
		self.m_panel11.axes.grid()

	def Execute(self, Flag):
		"""処理実行
		"""
		page = self.m_notebook2.GetSelection()
		if page == 0:  # コントラスト制限適応ヒストグラム平坦化
			cliplimit =     self.m_spinCtrlDouble3.GetValue()
			tile      = int(self.m_spinCtrlDouble4.GetValue())
			if Flag:
				self.cv_image = self.cv_image.equalizeHist_CLAHE(cliplimit, tile)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.equalizeHist_CLAHE(cliplimit, tile)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 1:  # ヒストグラム平坦化 (パラメータなし)
			if Flag:
				self.cv_image = self.cv_image.equalizeHist()
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.equalizeHist()
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 2:  # ヒストグラム正規化
			min = self.m_spinCtrlDouble44.GetValue()
			max = self.m_spinCtrlDouble45.GetValue()
			if Flag:
				self.cv_image = self.cv_image.normalize(min, max)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.normalize(min, max)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 3:  # ヒストグラム拡張
			min = self.m_spinCtrlDouble8.GetValue()
			max = self.m_spinCtrlDouble9.GetValue()
			if min == max:
				wx.MessageBox('パラメータが不適切(min = max)です', 'エラー', wx.ICON_ERROR)
				return
			if Flag:
				self.cv_image = self.cv_image.expand_histogram(min, max)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.expand_histogram(min, max)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 4:  # ヒストグラム伸張
			min1 = self.m_spinCtrlDouble10.GetValue()
			max1 = self.m_spinCtrlDouble11.GetValue()
			min2 = self.m_spinCtrlDouble12.GetValue()
			max2 = self.m_spinCtrlDouble13.GetValue()
			if min1 == max1:
				wx.MessageBox('パラメータが不適切(min1 = max1)です', 'エラー', wx.ICON_ERROR)
				return
			if Flag:
				self.cv_image = self.cv_image.stretch_histogram(min1, max1, min2, max2)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.stretch_histogram(min1, max1, min2, max2)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 5:  # 反転(パラメータなし)
			if Flag:
				self.cv_image = self.cv_image.bitwise_not_brightness()
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.bitwise_not_brightness()
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 6:  # ネガポジ反転(パラメータなし)
			if Flag:
				self.cv_image = self.cv_image.bitwise_not()
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.bitwise_not()
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 7:  # 平均と標準偏差を指定してヒストグラム変更
			std = self.m_spinCtrlDouble6.GetValue()
			avg = self.m_spinCtrlDouble7.GetValue()
			if Flag:
				self.cv_image = self.cv_image.convert_histogram_avg_std(avg, std)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.convert_histogram_avg_std(avg, std)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 8:  # コントラスト、明るさ変換
			alpha = self.m_spinCtrlDouble5.GetValue()
			beta  = self.m_spinCtrlDouble48.GetValue()
			if Flag:
				self.cv_image = self.cv_image.convert_contrast_brightness(alpha, beta)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.convert_contrast_brightness(alpha, beta)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 9:  # コントラスト、明るさ変換2
			alpha = self.m_spinCtrlDouble46.GetValue()
			beta  = self.m_spinCtrlDouble47.GetValue()
			if Flag:
				self.cv_image = self.cv_image.convertScaleAbs(alpha, beta)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.convertScaleAbs(alpha, beta)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		if not Flag:
			self.ShowHist(ret_img)

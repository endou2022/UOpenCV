"""Subclass of LookUpDlg, which is generated by wxFormBuilder."""

import wx

import CL
import UCommon
from UOpenCV import UOpenCV

import matplotlib
matplotlib.use('WXAgg')

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from matplotlib.figure import Figure

# Implementing LookUpDlg
class ULookUpDlg( CL.LookUpDlg ):
	def __init__( self, parent ):
		CL.LookUpDlg.__init__( self, parent )

	# Handlers for LookUpDlg events.
	def OnCancel( self, event ):
		# TODO: Implement OnCancel
		self.EndModal(0)

	def OnFOpen( self, event ):
		# TODO: Implement OnFOpen
		fname = self.m_filePicker5.GetPath()
		if fname == '':
			wx.MessageBox('ファイルが指定されていません', 'エラー', wx.ICON_ERROR)
			return
		try:
			 self.lut, self.lut_name, self.description = UOpenCV.read_lookuptable(fname)
		except Exception as e:
			wx.MessageBox(str(e), 'エラー', wx.ICON_ERROR)
			return
		self.m_panel39.figure = Figure(dpi=100, figsize=(2.7, 2.7)) # figsizeで大きさ指定　単位はインチ
		self.m_panel39.axes = self.m_panel39.figure.add_subplot(111)
		self.m_panel39.canvas = FigureCanvas(self.m_panel39, -1, self.m_panel39.figure)
		self.m_panel39.axes.plot(self.lut, color='k')
		self.m_panel39.axes.grid()

	def OnPreView( self, event ):
		# TODO: Implement OnPreView
		self.Execute(False)

	def OnExec( self, event ):
		# TODO: Implement OnExec
		ret = self.Execute(True)
		if ret:
			self.EndModal(1)

	def Execute(self, Flag):
		"""処理実行
		"""
		if not hasattr(self, 'lut'):
			wx.MessageBox('ルックアップテーブルが読み込まれていません', 'エラー', wx.ICON_ERROR)
			return False
		if Flag:
			self.cv_image = self.cv_image.lookup_table_brightness(self.lut, self.lut_name)
			self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
		else:
			ret_img = self.cv_image.lookup_table_brightness(self.lut, self.lut_name)
			self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))
		return True

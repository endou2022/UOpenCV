"""Subclass of EdgeDlg, which is generated by wxFormBuilder."""

import cv2

import wx

import CL
import UCommon

# Implementing EdgeDlg
class UEdgeDlg( CL.EdgeDlg ):
	def __init__( self, parent ):
		CL.EdgeDlg.__init__( self, parent )
		self.parent = parent

	# Handlers for EdgeDlg events.
	def OnCancel( self, event ):
		# TODO: Implement OnCancel
		self.EndModal(0)

	def OnPreView( self, event ):
		# TODO: Implement OnPreView
		self.Execute(False)

	def OnExec( self, event ):
		# TODO: Implement OnExec
		self.Execute(True)
		self.EndModal(1)

	def Execute(self, Flag):
		"""処理実行
		"""
		page = self.m_notebook3.GetSelection()
		if page == 0:  # ハフ変換　円
			dp        = self.m_spinCtrlDouble42.GetValue()
			minDist   = self.m_spinCtrlDouble43.GetValue()
			param1    = self.m_spinCtrlDouble44.GetValue()
			param2    = self.m_spinCtrlDouble45.GetValue()
			minRadius = self.m_spinCtrl40.GetValue()
			maxRadius = self.m_spinCtrl41.GetValue()
			if Flag:
				self.cv_image = self.cv_image.HoughCircles(method=cv2.HOUGH_GRADIENT, dp=dp, minDist=minDist, param1=param1, param2=param2, minRadius=minRadius, maxRadius=maxRadius)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
				self.parent.RetDlg.HoughCirclesResult(self.cv_image)
			else:
				ret_img = self.cv_image.HoughCircles(method=cv2.HOUGH_GRADIENT, dp=dp, minDist=minDist, param1=param1, param2=param2, minRadius=minRadius, maxRadius=maxRadius)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))
				self.parent.RetDlg.HoughCirclesResult(ret_img)
		elif page == 1:  # ハフ変換　線分
			rho           = self.m_spinCtrlDouble47.GetValue()
			threshold     = self.m_spinCtrl42.GetValue()
			minLineLength = self.m_spinCtrl441.GetValue()
			maxLineGap    = self.m_spinCtrl451.GetValue()
			if Flag:
				self.cv_image = self.cv_image.HoughLinesP(rho=rho, theta=3.14159265/360.0, threshold=threshold, minLineLength=minLineLength, maxLineGap=maxLineGap)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
				self.parent.RetDlg.LinesResult(self.cv_image)
			else:
				ret_img = self.cv_image.HoughLinesP(rho=rho, theta=3.14159265/360.0, threshold=threshold, minLineLength=minLineLength, maxLineGap=maxLineGap)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))
				self.parent.RetDlg.LinesResult(ret_img)
		elif page == 2:  # Fast Line
			length_threshold    = self.m_spinCtrl43.GetValue()
			distance_threshold  = self.m_spinCtrlDouble51.GetValue()
			canny_th1           = self.m_spinCtrl44.GetValue()
			canny_th2           = self.m_spinCtrl45.GetValue()
			canny_size          = self.m_spinCtrl46.GetValue()
			do_merge_s          = self.m_choice1.GetSelection()
			if do_merge_s:
				do_merge = True
			else:
				do_merge = False
			if Flag:
				self.cv_image = self.cv_image.FastLineDetector(length_threshold=length_threshold, distance_threshold=distance_threshold, canny_th1=canny_th1, canny_th2=canny_th2, canny_aperture_size=canny_size, do_merge=do_merge)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
				self.parent.RetDlg.LinesResult(self.cv_image)
			else:
				ret_img = self.cv_image.FastLineDetector(length_threshold=length_threshold, distance_threshold=distance_threshold, canny_th1=canny_th1, canny_th2=canny_th2, canny_aperture_size=canny_size, do_merge=do_merge)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))
				self.parent.RetDlg.LinesResult(ret_img)
		elif page == 3:  # Line Segment
			scale       = self.m_spinCtrlDouble52.GetValue()
			sigma_scale = self.m_spinCtrlDouble58.GetValue()
			quant       = self.m_spinCtrlDouble57.GetValue()
			ang_th      = self.m_spinCtrlDouble56.GetValue()
			log_eps     = self.m_spinCtrlDouble55.GetValue()
			density_th  = self.m_spinCtrlDouble54.GetValue()
			n_bins      = self.m_spinCtrl461.GetValue()
			if Flag:
				self.cv_image = self.cv_image.LineSegmentDetector(scale=scale, sigma_scale=sigma_scale, quant=quant, ang_th=ang_th, log_eps=log_eps, density_th=density_th, n_bins=n_bins)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
				self.parent.RetDlg.LinesResult(self.cv_image)
			else:
				ret_img = self.cv_image.LineSegmentDetector(scale=scale, sigma_scale=sigma_scale, quant=quant, ang_th=ang_th, log_eps=log_eps, density_th=density_th, n_bins=n_bins)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))
				self.parent.RetDlg.LinesResult(ret_img)

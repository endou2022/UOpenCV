"""Subclass of BinaryDlg, which is generated by wxFormBuilder."""

import cv2
import wx

import CL
from UOpenCV import UOpenCV
import UCommon

import matplotlib
matplotlib.use('WXAgg')

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from matplotlib.figure import Figure

# Implementing BinaryDlg
class UBinaryDlg( CL.BinaryDlg ):
	def __init__( self, parent ):
		CL.BinaryDlg.__init__( self, parent )

	# Handlers for BinaryDlg events.
	def OnCancel( self, event ):
		# TODO: Implement OnCancel
		self.EndModal(0)

	def OnPreView( self, event ):
		# TODO: Implement OnPreView
		self.Execute(False)

	def OnExec( self, event ):
		# TODO: Implement OnExec
		self.Execute(True)
		self.EndModal(1)

	def ShowHist(self):
		"""ヒストグラムを表示する
		"""
		gray = self.cv_image.calcHist()  # ダイアローグに表示するグラフ
		self.m_panel11.figure = Figure(dpi=100, figsize=(3.7,2.3)) # figsizeで大きさ指定　単位はインチ
		self.m_panel11.axes = self.m_panel11.figure.add_subplot(111)
		self.m_panel11.canvas = FigureCanvas(self.m_panel11, -1, self.m_panel11.figure)
		self.m_panel11.axes.plot(gray.hist_b, color='k')
		self.m_panel11.axes.grid()

	def Execute(self, Flag):
		"""処理実行
		"""
		page = self.m_notebook2.GetSelection()
		if page == 0:  # 固定閾値
			th = self.m_spinCtrl35.GetValue()
			if Flag:
				self.cv_image = self.cv_image.threshold(th, cv2.THRESH_BINARY)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.threshold(th, cv2.THRESH_BINARY)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		if page == 1:  # 大津の手法
			if Flag:
				self.cv_image = self.cv_image.threshold(128, cv2.THRESH_OTSU)  # 128はダミー
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
				txt = '計算された閾値 = {}'.format(self.cv_image.threshold)
			else:
				ret_img = self.cv_image.threshold(128, cv2.THRESH_OTSU)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))
				txt = '計算された閾値 = {}'.format(ret_img.threshold)
			self.m_staticText119.SetLabel(txt)

		if page == 2:  # トライアングルアルゴリズム
			if Flag:
				self.cv_image = self.cv_image.threshold(128, cv2.THRESH_TRIANGLE)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
				txt = '計算された閾値 = {}'.format(self.cv_image.threshold)
			else:
				ret_img = self.cv_image.threshold(128, cv2.THRESH_TRIANGLE)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))
				txt = '計算された閾値 = {}'.format(ret_img.threshold)
			self.m_staticText120.SetLabel(txt)

		if page == 3:  # 適応的2値化
			alg = self.m_choice4.GetSelection()
			bsize = self.m_spinCtrl36.GetValue()
			cx = self.m_spinCtrl37.GetValue()
			if alg == 0:
				meth = cv2.ADAPTIVE_THRESH_MEAN_C
			else:
				meth = cv2.ADAPTIVE_THRESH_GAUSSIAN_C
			if Flag:
				self.cv_image = self.cv_image.adaptiveThreshold(adaptiveMethod=meth, blockSize=bsize, C=cx)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.adaptiveThreshold(adaptiveMethod=meth, blockSize=bsize, C=cx)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

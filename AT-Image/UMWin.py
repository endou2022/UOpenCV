# -*- coding: utf-8 -*-

"""Subclass of MWin, which is generated by wxFormBuilder."""

import copy

import cv2
import numpy as np
import wx

# 子ウインドウやダイアローグのクラスを読み込んでおく
import  CL
from UBWin          import  UBWin
from UCWin          import  UCWin
from UEWin          import  UEWin
from UGWin          import  UGWin
from ULWin          import  ULWin
from UArtDlg        import  UArtDlg
from UBinaryDlg     import  UBinaryDlg
from UBinOpDlg      import  UBinOpDlg
from UChHistDlg     import  UChHistDlg
from UCvtColorDlg   import  UCvtColorDlg
from UEdgeDlg       import  UEdgeDlg
from UFilterDlg     import  UFilterDlg
from UIFFTDlg       import  UIFFTDlg
from ULogDlg        import  ULogDlg
from ULookUpDlg     import  ULookUpDlg
from UMonoDlg       import  UMonoDlg
from UMorphologyDlg import  UMorphologyDlg
from UOpDlg         import  UOpDlg
from UOpenCV        import  UOpenCV
from UPixDlg        import  UPixDlg
from UPseudDlg      import  UPseudDlg
from URubberBand    import  URubberBand
from USamplingDlg   import  USamplingDlg
from UShadingDlg    import  UShadingDlg
from URetDlg        import  URetDlg
from ULabelDlg      import  ULabelDlg
from UContoursDlg   import  UContoursDlg

from UFileDropTarget import UFileDropTarget
import UCommon
from UOpenCV import UOpenCV
from UIniFile import UIniFile  # 本当はxmlファイルを使いたかったが、簡単なiniファイルにした

# wxFormBuilderの出力は、スペース*4ではなくタブ
# Implementing MWin
class UMWin( CL.MWin ):
	def __init__( self, parent ):  # ATImage.py で UMWin(None) として呼び出されている(parent = None)
		CL.MWin.__init__( self, parent )
		# 1回ごとに作るとパラメータがリセットされる
		# 必要なダイアローグはメインウインドウの配下に作っておく
		# グローバルに参照できるところにオブジェクトを作っておきたい
		self.ArtDlg        = UArtDlg(self)
		self.BinaryDlg     = UBinaryDlg(self)
		self.BinOpDlg      = UBinOpDlg(self)
		self.ChHistDlg     = UChHistDlg(self)
		self.CvtColorDlg   = UCvtColorDlg(self)
		self.EdgeDlg       = UEdgeDlg(self)
		self.FilterDlg     = UFilterDlg(self)
		self.IFFTDlg       = UIFFTDlg(self)
		self.LogDlg        = ULogDlg(self)
		self.LookUpDlg     = ULookUpDlg(self)
		self.MonoDlg       = UMonoDlg(self)
		self.MorphologyDlg = UMorphologyDlg(self)
		self.OpDlg         = UOpDlg(self)
		self.PixDlg        = UPixDlg(self)
		self.PseudDlg      = UPseudDlg(self)
		self.RubberBand    = URubberBand(self)
		self.SamplingDlg   = USamplingDlg(self)
		self.ShadingDlg    = UShadingDlg(self)
		self.RetDlg        = URetDlg(self)
		self.LabelDlg      = ULabelDlg(self)
		self.ContoursDlg   = UContoursDlg(self)

		self.ChildWinPoint = wx.Point(10,10)  # 子ウインドウを表示する位置。ウインドウを作るごとに変化させる
		droptarget = UFileDropTarget(self) # メインウインドウをドロップ対応にしておけば、子ウインドウへのドロップも受け入れることができる
		self.SetDropTarget(droptarget)

		self.ini_file = UIniFile('ATImage.ini')
		self.ini_file.SetPosSize(self, 'MainFrame')
		self.ini_file.SetPos(self.PixDlg, 'PixDlg')
		self.ini_file.SetPos(self.RetDlg, 'RetDlg')

	# Handlers for MWin events.
	def OnExit( self, event ):
		# TODO: Implement OnExit
		self.ini_file.WritePosSize(self, 'MainFrame')
		self.ini_file.WritePos(self.PixDlg, 'PixDlg')
		self.ini_file.WritePos(self.RetDlg, 'RetDlg')
		self.ini_file.write_ini_file()
		wx.Exit()

	def OnOpen( self, event ):
		# TODO: Implement OnOpen
		self.OpenImgFile()

	def OnCopy( self, event ):
		# TODO: Implement OnCopy
		win = self.GetActiveChild()
		if win is None:
			return
		UCommon.CopyToClipboard(win.cv_image)

	def OnPaste( self, event ):
		# TODO: Implement OnPaste
		self.CopyFromClipboard()

	def OnAbout( self, event ):
		# TODO: Implement OnAbout
		UCommon.About()

	def OnSaveAs( self, event ):
		# TODO: Implement OnSaveAs
		win = self.GetActiveChild()
		if win is None:
			return
		UCommon.SaveAs(win)

	def OnWClose( self, event ):
		# TODO: Implement OnWClose
		win = self.GetActiveChild()
		if win is None:
			return
		win.Close()

	def OnZoomOut( self, event ):
		# TODO: Implement OnZoomOut
		win = self.GetActiveChild()
		if win is None:
			return
		UCommon.ZoomOut(win)

	def OnZoomIn( self, event ):
		# TODO: Implement OnZoomIn
		win = self.GetActiveChild()
		if win is None:
			return
		UCommon.ZoomIn(win)

	def OnViewLog( self, event ):
		# TODO: Implement OnViewLog
		win = self.GetActiveChild()
		if win is None:
			return
		self.LogDlg.DispLog(win.cv_image)

	def OnGray( self, event ):
		# TODO: Implement OnGray
		win = self.GetActiveChild()
		if win is None:
			return
		if win.cv_image.kind == 'gray':
			wx.MessageBox('グレースケール画像です', '情報', wx.ICON_INFORMATION)
			return
		self.NewGrayWindow(win.cv_image.grayscale(), win.magnification)
		self.SetWinTitle(win)

	def OnBinary( self, event ):
		# TODO: Implement OnBinary
		win = self.GetActiveChild()
		if win is None:
			return
		if win.cv_image.kind == 'color':
			win = self.NewBinWindow(win.cv_image.grayscale(), win.magnification)
		else:
			win = self.NewBinWindow(win.cv_image, win.magnification)
		self.BinaryDlg.cv_image = win.cv_image
		self.BinaryDlg.bitmap   = win.m_bitmap1
		self.BinaryDlg.magnification = win.magnification
		self.BinaryDlg.ShowHist()
		ret = self.BinaryDlg.ShowModal()
		if ret == 1:
			win.cv_image = copy.deepcopy(self.BinaryDlg.cv_image)
			self.SetWinTitle(win)
		else:
			win.Destroy()

	def OnBitwise( self, event ):
		# TODO: Implement OnBitwise
		win = self.GetActiveChild()
		if win is None:
			return
		if win.cv_image.kind == 'color':
			self.NewColorWindow(win.cv_image.bitwise_not(), win.magnification)
			self.SetWinTitle(win)
		elif win.cv_image.kind == 'gray':
			self.NewGrayWindow(win.cv_image.bitwise_not(), win.magnification)
			self.SetWinTitle(win)
		elif win.cv_image.kind == 'binary':
			self.NewBinWindow(win.cv_image.bitwise_not(), win.magnification)
			self.SetWinTitle(win)
		else:
			wx.MessageBox('反転できない画像です', '情報', wx.ICON_INFORMATION)
			return

	def OnHist( self, event ):
		# TODO: Implement OnHist
		win = self.GetActiveChild()
		if win is None:
			return
		win.cv_image.calcHist()
		self.RetDlg.HistResult(win.cv_image)
		UCommon.showHist(win.cv_image)

	def OnOp( self, event ):
		# TODO: Implement OnOp
		win_a = self.GetActiveChild()
		if win_a is None:
			return
		self.OpDlg.SetChoice(win_a.GetTitle())
		win = self.NewColorWindow(win_a.cv_image, win_a.magnification)
		self.OpDlg.cv_image = win.cv_image
		self.OpDlg.bitmap   = win.m_bitmap1
		self.OpDlg.magnification = win.magnification
		ret = self.OpDlg.ShowModal()
		if ret == 1:
			win.cv_image = copy.deepcopy(self.OpDlg.cv_image)
			self.SetWinTitle(win)
		else:
			win.Destroy()

	def OnDistH( self, event ):
		# TODO: Implement OnHistH
		win = self.GetActiveChild()
		if win is None:
			return
		win.cv_image.projection_distribution_h()
		self.RetDlg.DistResult(win.cv_image)
		UCommon.showDist(win.cv_image)

	def OnDistV( self, event ):
		# TODO: Implement OnHistV
		win = self.GetActiveChild()
		if win is None:
			return
		win.cv_image.projection_distribution_v()
		self.RetDlg.DistResult(win.cv_image)
		UCommon.showDist(win.cv_image)

	def OnHistArea( self, event ):
		# TODO: Implement OnHistArea
		win = self.GetActiveChild()
		if win is None:
			return
		win.SetCursor(wx.Cursor(wx.CURSOR_CROSS))
		win.draw_type = URubberBand.Rectangle
		win.func_type = URubberBand.HistArea

	def OnLine( self, event ):
		# TODO: Implement OnLine
		win = self.GetActiveChild()
		if win is None:
			return
		win.SetCursor(wx.Cursor(wx.CURSOR_CROSS))
		win.draw_type = URubberBand.Line
		win.func_type = URubberBand.DistLine

	def OnPixcel( self, event ):
		# TODO: Implement OnPixcel
		self.PixDlg.Show(True)

	def OnDrop( self, path ):
		# ドロップの受け入れ関数
		try:
			cv_image = UOpenCV(path)
			self.NewColorWindow(cv_image, 1.0)
		except:  # 無視する
			pass

# -------------------------
#
#   ウインドウを開くルーチンはメインウインドウのインスタンス（メンバー関数）にしておく
#   別ファイルにすると UCWinファイルなどの循環参照になってしまう
#
	def OpenImgFile(self):
		"""画像ファイルを開く
		"""
		dialog = wx.FileDialog(None, "ファイルを選択", wildcard="画像ファイル(png,jpg,bmp)|*.png;*.jpg;*.bmp", style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
		if dialog.ShowModal() == wx.ID_OK:
			path = dialog.GetPath()
			cv_image = UOpenCV(path)
			self.NewColorWindow(cv_image, 1.0)
		dialog.Destroy()

	def NewColorWindow(self, cv_image, mag):
		"""新しいカラーウインドウを作って表示する
		"""
		win = UCWin(self)
		win = self.NewWindow(win, cv_image, mag)
		return win

	def NewGrayWindow(self, cv_image, mag):
		"""新しいグレーウインドウを作って表示する
		"""
		win = UGWin(self)
		win = self.NewWindow(win, cv_image, mag)
		return win

	def NewBinWindow(self, cv_image, mag):
		"""新しい２値ウインドウを作って表示する
		"""
		win = UBWin(self)
		win = self.NewWindow(win, cv_image, mag)
		return win

	def NewEtcWindow(self, cv_image, mag):
		"""新しいその他のウインドウを作って表示する
		"""
		win = UEWin(self)
		win = self.NewWindow(win, cv_image, mag)
		return win

	def NewLabelWindow(self, cv_image, mag):
		"""新しいラベリング結果ウインドウを作って表示する
		"""
		win = ULWin(self)
		win = self.NewWindow(win, cv_image, mag)
		return win

	def NewWindow(self, win, cv_image, mag):
		"""新しいウインドウの諸元を整える
		"""
		win.SetPosition(self.ChildWinPoint)
		self.ChildWinPoint = self.ChildWinPoint + wx.Point(20,20)  # 新しいウインドウを表示する位置　指定しないと変な場所に現れてしまう
		win.cv_image = copy.deepcopy(cv_image)
		win.magnification = mag
		wx_bitmap = UCommon.uopencv2wxbitmap(win.cv_image, win.magnification)
		win.m_bitmap1.SetBitmap(wx_bitmap)
		w , h = wx_bitmap.GetSize()
		win.SetSize((w+30, h+50))
		self.SetWinTitle(win)
		win.Show(True)
		return win

	def SetWinTitle(self, win):
		"""ウインドウの名前を設定する
		"""
		if   win.cv_image.kind == 'color':
			kind = 'カラー画像'
		elif win.cv_image.kind == 'gray':
			kind = 'グレースケール画像'
		elif win.cv_image.kind == 'binary':
			kind = '２値画像'
		elif win.cv_image.kind == 'fft':
			kind = 'FFT画像'
		else:
			kind = 'その他の画像'

		wname = '{} {} {}'.format(kind, len(win.cv_image.log), win.cv_image.log[0])
		win.SetTitle(wname)

	def CopyFromClipboard(self):
		"""クリップボードに画像データがあればコピーする
		@link https://stackoverflow.com/questions/2629907/reading-an-image-from-the-clipboard-with-wxpython (2023/06/07)
		"""
		clip    = wx.Clipboard()
		bmp_obj = wx.BitmapDataObject()
		clip.Open()
		ret = clip.GetData(bmp_obj)
		clip.Close()
		if ret == False:  # クリップボードに画像がなければ何もしない
			return

		bitmap = bmp_obj.GetBitmap()
		buff   = np.full((bitmap.Height, bitmap.Width, 3), 0, np.uint8)  # コピー先を作っておく
		bitmap.CopyToBuffer(buff)   # format=BitmapBufferFormat_RGB がデフォルトなので、32ビットでも24ビットにしてくれる
		cv_image = UOpenCV()
		cv_image._bitmap = cv2.cvtColor(buff, cv2.COLOR_RGB2BGR)
		cv_image._name   = 'clip_board'
		cv_image._kind   = 'color'
		cv_image._log.append('clip_board')
		self.NewColorWindow(cv_image, 1.0)
# -------------------------

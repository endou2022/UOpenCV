"""Subclass of ArtDlg, which is generated by wxFormBuilder."""

import wx

import CL
import UCommon

# Implementing ArtDlg
class UArtDlg( CL.ArtDlg ):
	def __init__( self, parent ):
		CL.ArtDlg.__init__( self, parent )

	# Handlers for ArtDlg events.
	def OnCancel( self, event ):
		# TODO: Implement OnCancel
		self.EndModal(0)

	def OnPreView( self, event ):
		# TODO: Implement OnPreView
		self.Execute(False)

	def OnExec( self, event ):
		# TODO: Implement OnExec
		self.Execute(True)
		self.EndModal(1)

	def Execute(self, Flag):
		"""処理実行
		"""
		page = self.m_notebook3.GetSelection()
		if page == 0:  # 油絵
			size  = self.m_spinCtrl7.GetValue()
			ratio = self.m_spinCtrl37.GetValue()
			if Flag:
				self.cv_image = self.cv_image.oilPainting(size, ratio)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.oilPainting(size, ratio)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 1:  # 水彩画
			sigma_s = self.m_spinCtrlDouble42.GetValue()
			sigma_r = self.m_spinCtrlDouble43.GetValue()
			if Flag:
				self.cv_image = self.cv_image.stylization(sigma_s, sigma_r)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.stylization(sigma_s, sigma_r)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 2:  # 鉛筆
			sigma_s = self.m_spinCtrlDouble47.GetValue()
			sigma_r = self.m_spinCtrlDouble48.GetValue()
			shade   = self.m_spinCtrlDouble49.GetValue()
			if Flag:
				self.cv_image = self.cv_image.pencilSketch(sigma_s, sigma_r, shade)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.pencilSketch(sigma_s, sigma_r, shade)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		elif page == 3:  # ポスタリゼーション
			n = self.m_spinCtrl43.GetValue()
			if Flag:
				self.cv_image = self.cv_image.posterization(n)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
			else:
				ret_img = self.cv_image.posterization(n)
				self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

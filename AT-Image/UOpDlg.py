"""Subclass of OpDlg, which is generated by wxFormBuilder."""

import wx

import CL
import UCommon

# Implementing OpDlg
class UOpDlg( CL.OpDlg ):
	def __init__( self, parent ):
		CL.OpDlg.__init__( self, parent )
		self.parent = parent

	# Handlers for OpDlg events.
	def OnCancel( self, event ):
		# TODO: Implement OnCancel
		self.EndModal(0)

	def OnPreView( self, event ):
		# TODO: Implement OnPreView
		self.Execute(False)

	def OnExec( self, event ):
		# TODO: Implement OnExec
		self.Execute(True)
		self.EndModal(1)

	def SetChoice(self, name):
		"""ウインドウ選択を設定する
		"""
		self.m_choice2.Clear()
		self.m_choice2.Set([name])
		self.m_choice2.SetSelection(0)

		self.IDs , self.WNames = UCommon.EnumChildWindow(self.parent)
		self.m_choice3.Clear()
		self.m_choice3.Set(self.WNames)
		self.m_choice3.SetSelection(0)

	def Execute(self, Flag):
		"""処理実行
		"""
		cof1   = self.m_spinCtrlDouble44.GetValue()
		cof2   = self.m_spinCtrlDouble45.GetValue()
		sel    = self.m_choice3.GetSelection()
		win    = wx.FindWindowById(self.IDs[sel])
		offset = self.m_spinCtrl32.GetValue()
		opNum  = self.m_radioBox3.GetSelection()
		if   opNum == 0:
			op = 'ex1'
		elif opNum == 1:
			op = 'ADD'
		elif opNum == 2:
			op = 'SUB'
		elif opNum == 3:
			op = 'ABS'
		elif opNum == 4:
			op = 'MAX'
		elif opNum == 5:
			op = 'MIN'
		elif opNum == 6:
			op = 'AND'
		elif opNum == 7:
			op = 'OR'
		elif opNum == 8:
			op = 'XOR'
		elif opNum == 9:
			op = 'ex2'

		try:
			if opNum == 0:
				if Flag:
					self.cv_image = self.cv_image.addWeighted(cof1, win.cv_image, cof2, offset)
					self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
				else:
					ret_img = self.cv_image.addWeighted(cof1, win.cv_image, cof2, offset)
					self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

			if 1 <= opNum and opNum <= 8:
				if Flag:
					self.cv_image = self.cv_image.operation(win.cv_image, op)
					self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
				else:
					ret_img = self.cv_image.operation(win.cv_image, op)
					self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

			if opNum == 9:
				if Flag:
					self.cv_image = self.cv_image.addWeighted(cof1, win.cv_image, 1.0 - cof1, offset)
					self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(self.cv_image, self.magnification))
				else:
					ret_img = self.cv_image.addWeighted(cof1, win.cv_image, 1.0 - cof1, offset)
					self.bitmap.SetBitmap(UCommon.uopencv2wxbitmap(ret_img, self.magnification))

		except Exception as e:
			wx.MessageBox(str(e), 'エラー', wx.ICON_ERROR)
			return
